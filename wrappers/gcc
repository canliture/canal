#!/usr/bin/python
import sys
import subprocess
import datetime
import config
import args

#
# Running GCC
#
sys.argv[0] = "/usr/bin/gcc"
gcc_retcode = subprocess.call(sys.argv)
if gcc_retcode != 0:
    sys.exit(gcc_retcode)

def run(argv):
    log = file("llvm.log", "a")
    log.write("=======================================\n")
    log.write("run: " + " ".join(argv) + "\n")
    log.write("date: {0}\n".format(datetime.datetime.now()))
    proc = subprocess.Popen(argv, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = proc.communicate()
    log.write("".join(["stdout: {0}".format(line) for line in stdout.splitlines(True)]))
    log.write("".join(["stderr: {0}".format(line) for line in stderr.splitlines(True)]))
    log.write("exit: {0}\n".format(proc.returncode))
    log.write("reason: {0}\n".format(sys.argv))
    log.close()

#
# Analyzing arguments
#
(gcc_args, remainder) = args.parser.parse_known_args(sys.argv[1:])

if args.is_compile(gcc_args, remainder):
    for command in args.get_compile_commands(gcc_args, remainder):
        run(command)

if args.is_linking(gcc_args, remainder):
    for command in args.get_linking_commands(gcc_args, remainder):
        run(command)

if args.is_other(gcc_args, remainder):
    run(args.get_other_command(gcc_args, remainder))

sys.exit(gcc_retcode)
