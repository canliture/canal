# RESULT
function main
  %^positive
    integer
      enumeration 3
  %^zero       
    integer
      enumeration 0
  %^negative
    integer
      enumeration -8
  %^positive_negative
    integer
      enumeration 12
# END RESULT

; ModuleID = '0.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-redhat-linux-gnu"

define i32 @main(i32 %argc, i8** %argv) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8**, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %positive = alloca i32, align 4
  %zero = alloca i32, align 4
  %negative = alloca i32, align 4
  %positive_negative = alloca i32, align 4
  store i32 0, i32* %1
  store i32 %argc, i32* %2, align 4
  store i8** %argv, i8*** %3, align 8
  store i32 1, i32* %a, align 4
  store i32 -4, i32* %b, align 4
  store i32 0, i32* %c, align 4
  %4 = load i32* %a, align 4
  %5 = load i32* %a, align 4
  %6 = mul nsw i32 %4, %5
  store i32 %6, i32* %positive, align 4
  %7 = load i32* %a, align 4
  %8 = load i32* %a, align 4
  %9 = add nsw i32 %7, %8
  %10 = load i32* %positive, align 4
  %11 = add nsw i32 %10, %9
  store i32 %11, i32* %positive, align 4
  %12 = load i32* %c, align 4
  %13 = load i32* %positive, align 4
  %14 = add nsw i32 %13, %12
  store i32 %14, i32* %positive, align 4
  %15 = load i32* %a, align 4
  %16 = load i32* %c, align 4
  %17 = mul nsw i32 %15, %16
  store i32 %17, i32* %zero, align 4
  %18 = load i32* %b, align 4
  %19 = load i32* %c, align 4
  %20 = mul nsw i32 %18, %19
  %21 = load i32* %zero, align 4
  %22 = add nsw i32 %21, %20
  store i32 %22, i32* %zero, align 4
  %23 = load i32* %c, align 4
  %24 = load i32* %zero, align 4
  %25 = add nsw i32 %24, %23
  store i32 %25, i32* %zero, align 4
  %26 = load i32* %c, align 4
  %27 = load i32* %zero, align 4
  %28 = sub nsw i32 %27, %26
  store i32 %28, i32* %zero, align 4
  %29 = load i32* %b, align 4
  %30 = load i32* %a, align 4
  %31 = mul nsw i32 %29, %30
  store i32 %31, i32* %negative, align 4
  %32 = load i32* %b, align 4
  %33 = load i32* %negative, align 4
  %34 = add nsw i32 %33, %32
  store i32 %34, i32* %negative, align 4
  %35 = load i32* %c, align 4
  %36 = load i32* %c, align 4
  %37 = sub nsw i32 %35, %36
  %38 = load i32* %negative, align 4
  %39 = add nsw i32 %38, %37
  store i32 %39, i32* %negative, align 4
  %40 = load i32* %a, align 4
  %41 = load i32* %b, align 4
  %42 = add nsw i32 %40, %41
  store i32 %42, i32* %positive_negative, align 4
  %43 = load i32* %b, align 4
  %44 = load i32* %positive_negative, align 4
  %45 = mul nsw i32 %44, %43
  store i32 %45, i32* %positive_negative, align 4
  ret i32 0
}
